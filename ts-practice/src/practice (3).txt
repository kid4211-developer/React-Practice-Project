/* interface 선언 : Shape
 * - Shape interface 에는 getArea 라는 함수가 꼭 있어야 하며, 해당 함수의 반환값은 number */
interface Shape {
    getArea(): number;
}

/* - 타입스크립트에서는 constructor 의 파라미터 쪽에 public 또는 private accessor를 사용하면,
 *   직접 하나하나 설정해주는 작업을 생략해줄 수 있음
 *
 * - 'implements' 사용하여 해당 class가 Shape interface의 조건을 충족하겠다는 것을 명시 */
class Circle implements Shape {
    // radius: number; // 멤버 변수 radius 값을 설정
    constructor(public radius: number) {
        this.radius = radius;
    }

    /* 넓이를 계산하는 함수를 구현 */
    getArea() {
        return this.radius * this.radius * Math.PI;
    }
}

class Rectangle implements Shape {
    // width: number;
    // height: number;
    constructor(private width: number, private height: number) {
        this.width = width;
        this.height = height;
    }
    getArea() {
        return this.width * this.height;
    }
}

/* public으로 선언된 값은 class 외부에서 조회 할 수 있고, private로 선언된 값은 class 내부에서만 조회 할 수 있음
 * 때문에, circle의 radius값은 조회 할 수 있지만, rectangle의 width/height는 조회시 error가 발생함 */
const circle = new Circle(5);
const rectangle = new Rectangle(10, 5);

console.log(circle.radius);
// console.log(rectangle.width);

const shapes: Shape[] = [new Circle(5), new Rectangle(10, 5)];

shapes.forEach((shape) => {
    console.log(shape.getArea());
});
